---
title: "lebrec"
author: "Loiclebrec"
format: 
  html:
    code-fold: true       # Enables code folding in HTML output
    code-tools: true
  pdf:
    code: false           # Hides code in PDF output
execute:
  echo: false             # Hides code in both HTML and PDF globally
---
#Introduction
```{r}
library(dplyr)
library(ggplot2)
library(readr)
library(knitr)
library(tidyr)
theme_set(theme_minimal())
```

## Question 1 - Load the Data Set

```{r}
# Load the data set
grades <- read_csv("grades.csv")
```

```{r}
nrow(grades)
```
#Simple analyses


## Question 2 - Number of Grades

```{r, echo = FALSE}
# Calculate and display the sentence with the number of grades
paste("The data set contains", nrow(grades), "grades.")
```

## question 3 
```{r}
# Create a new data frame with unique students and their groups
unique_students <- grades %>%
  distinct(id, group)

# Calculate the number of unique students
num_students <- nrow(unique_students)
```

## Preview of the Last Five Rows of the Grades Data Set

```{r, echo = FALSE}
# Display the last five rows of the grades data frame
grades |>
  slice_tail(n = 5) |>
  knitr::kable()
```
## question 4 
```{r}
# Create a students data frame with unique student IDs and groups
students <- grades |> distinct(id, group)

# Display the first few rows of the students data frame
students |>
  slice_head(n = 5) |>
  knitr::kable()
```
## question 5 
```{r}
# Calculate the number of students per group
students_per_group <- students |>
  count(group)
```

```{r}
# Create a bar plot of the number of students per group with colors
ggplot(students_per_group, aes(x = factor(group), y = n, fill = factor(group))) +
  geom_col() +
  labs(title = "Number of Students per Group", x = "Group", y = "Number of Students") +
  theme_minimal() +
  scale_fill_viridis_d()
```
#question 6 
```{r}
# Filter for the course "Archery and Marksmanship" and compute the average grade per group
archery_avg <- grades |>
  filter(course == "Archery and Marksmanship") |>
  group_by(group) |>
  summarise(avg_grade = mean(grade, na.rm = TRUE))

# Plot the average grade per group using geom_col()
ggplot(archery_avg, aes(x = factor(group), y = avg_grade, fill = factor(group))) +
  geom_col() +
  labs(title = "Average Grade in Archery and Marksmanship by Group", x = "Group", y = "Average Grade") +
  theme_minimal() +
  scale_fill_viridis_d() # Optional, use a color scale for differentiation
```
## question 7 

```{r}
# Box plot comparing grade distributions between the two semesters
ggplot(grades, aes(x = factor(semester), y = grade, fill = factor(semester))) +
  geom_boxplot() +
  labs(title = "Grade Distribution by Semester", x = "Semester", y = "Grade") +
  theme_minimal() +
  scale_fill_viridis_d(name = "Semester")
# comment;
"it seems that the second semester has higher grades then the first one but idk why maybe they have more experince"
```

#Attendance analysis
##question 8 
```{r}
# Compute the number of grades per student, including their id and group
grades_per_student <- grades |>
  count(id, group, name = "num_grades")

# Display an extract of the resulting data frame (first 5 rows)
grades_per_student |>
  slice_head(n = 5) |>
  knitr::kable()
```
```{r}
grades %>%
  distinct(id, course, .keep_all = TRUE) %>% # Ensure each student-course combination is unique
  group_by(course) %>% # Group by course
  summarise(
    min_grade = min(grade, na.rm = TRUE), # Minimum grade for each course
    median_grade = median(grade, na.rm = TRUE), # Median grade for each course
    mean_grade = mean(grade, na.rm = TRUE), # Mean grade for each course
    max_grade = max(grade, na.rm = TRUE), # Maximum grade for each course
    n_students = n() # Number of unique students in each course
  )
```
## question 9 
```{r}
# Filter for "Onmyodo and Occult Arts" and count grades per student
onmyodo_grades <- grades %>%
  filter(course == "Onmyodo and Occult Arts") %>%
  group_by(id, group) %>%
  summarise(num_grades = n(), .groups = "drop") # Count grades for each student

# Display the first 5 rows as an extract
onmyodo_grades %>%
  slice_head(n = 5) %>%
  knitr::kable()
```
##question 10 

```{r}
# Calculate the distribution of the number of grades
grade_distribution <- onmyodo_grades %>%
  count(num_grades, name = "num_students") # Count the number of students for each number of grades

# Plot the distribution
ggplot(grade_distribution, aes(x = num_grades, y = num_students)) +
  geom_col(fill = "steelblue") +
  labs(
    title = "Distribution of the Number of Grades in Onmyodo and Occult Arts",
    x = "Number of Grades",
    y = "Number of Students"
  ) +
  theme_minimal()
```
## question 11 
```{r}
# Violin plot to see the distribution of grades per student by group
ggplot(onmyodo_grades, aes(x = factor(group), y = num_grades)) +
  geom_violin(fill = "lightgreen", alpha = 0.7) +
  labs(
    title = "Distribution of Number of Grades in Onmyodo and Occult Arts by Group",
    x = "Group",
    y = "Number of Grades per Student"
  ) +
  theme_minimal()
"comment: at eye level there is no big discranpecies, but more calculation would be required, there seems to be an exeption for group 15 tho."
```

#Grade analysis 
## question 12 
```{r}
# Calculate the average grade per course for each student
student_course_averages <- grades %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Pivot to create a wide-format data frame with one column per course
student_course_pivot <- student_course_averages %>%
  pivot_wider(
    names_from = course, # Use course names as new column names
    values_from = avg_grade # Use the average grade as the values for each course
  )

# Display a small extract (first 5 rows) with id, group, and two example courses
student_course_pivot %>%
  select(id, group, `Archery and Marksmanship`, `Bushido and Samurai Code`) %>%
  slice_head(n = 5) %>%
  knitr::kable()
```
## question 13 
```{r}
# Filter the data to only include the relevant courses for readability
average_grades <- student_course_pivot %>%
  select(id, group, `Bushido and Samurai Code`, `Ninjutsu and Stealth Arts`)

# Scatter plot to compare the average grades in the two courses
ggplot(average_grades, aes(x = `Ninjutsu and Stealth Arts`, y = `Bushido and Samurai Code`)) +
  geom_point(color = "steelblue", size = 3, alpha = 0.7) + # Points for each student
  geom_smooth(method = "lm", color = "darkred", linetype = "dashed") + # Optional trend line
  labs(
    title = "Comparison of Average Grades in Bushido and Samurai Code vs. Ninjutsu and Stealth Arts",
    x = "Average Grade in Ninjutsu and Stealth Arts",
    y = "Average Grade in Bushido and Samurai Code"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 12)
  )

"readibility and the use of a trend line: Adding clear labels, subtle colors, and a dashed trend line makes the chart easy to read and helps viewers quickly spot any relationship between the grades in the two courses without visual clutter.
The plot shows a slight positive trend: students who score well in “Bushido” tend to do a bit better in “Ninjutsu” too, but there’s a lot of spread, so the link isn’t very strong."
```

## question 14 
```{r}
# Calculate the average grade per course for each student
student_course_averages <- grades %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Pivot to create a wide-format data frame with average grades in each course
student_course_pivot <- student_course_averages %>%
  pivot_wider(
    names_from = course,
    values_from = avg_grade
  )

# Compute the correlation between the average grades in "Shinto and Buddhist Philosophy" and "Calligraphy and Poetry" for each group
correlation_by_group <- student_course_pivot %>%
  group_by(group) %>%
  summarise(
    correlation = cor(`Shinto and Buddhist Philosophy`, `Calligraphy and Poetry`, use = "complete.obs")
  )

# Display the results
correlation_by_group
```
## question 15
```{r}
# Step 1: Calculate the correlation for each group
correlation_by_group <- student_course_pivot %>%
  group_by(group) %>%
  summarise(
    correlation = cor(`Shinto and Buddhist Philosophy`, `Calligraphy and Poetry`, use = "complete.obs")
  ) %>%
  arrange(desc(abs(correlation))) # Sort by absolute correlation to get the strongest correlation

# Step 2: Identify the group with the strongest correlation
strongest_correlation_group <- correlation_by_group$group[1]

# Step 3: Filter data for the identified group
strongest_group_data <- student_course_pivot %>%
  filter(group == strongest_correlation_group)

# Step 4: Plot the average grades
ggplot(strongest_group_data, aes(x = `Calligraphy and Poetry`, y = `Shinto and Buddhist Philosophy`)) +
  geom_point(color = "steelblue", size = 3, alpha = 0.7) +
  labs(
    title = paste("Average Grades in Shinto and Buddhist Philosophy vs. Calligraphy and Poetry"),
    subtitle = paste("Group with strongest correlation (Group", strongest_correlation_group, ")"),
    x = "Average Grade in Calligraphy and Poetry",
    y = "Average Grade in Shinto and Buddhist Philosophy"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 12)
  )
```
## question 16 
```{r}
# Step 1: Calculate the average grade per course for each student
student_course_averages <- grades %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Step 2: Calculate the final grade as the average of these course averages for each student
final_grades <- student_course_averages %>%
  group_by(id, group) %>%
  summarise(final_grade = mean(avg_grade, na.rm = TRUE), .groups = "drop")

# Step 3: Sort the data frame in descending order by final grade
final_grades <- final_grades %>%
  arrange(desc(final_grade))

# Step 4: Display the first five rows
final_grades %>%
  slice_head(n = 5) %>%
  knitr::kable(
    caption = "Top 5 Students by Final Grade"
  )
```
## question 17 
```{r}
# 1. Summary Statistics for Final Grades by Group
group_summary <- final_grades %>%
  group_by(group) %>%
  summarise(
    mean_grade = mean(final_grade, na.rm = TRUE),
    median_grade = median(final_grade, na.rm = TRUE),
    min_grade = min(final_grade, na.rm = TRUE),
    max_grade = max(final_grade, na.rm = TRUE),
    .groups = "drop"
  )

# Display the summary table
group_summary %>%
  knitr::kable(
    caption = "Summary Statistics of Final Grades by Group"
  )

# 2. Box Plot of Final Grades by Group
ggplot(final_grades, aes(x = factor(group), y = final_grade)) +
  geom_boxplot(fill = "lightblue") +
  labs(
    title = "Distribution of Final Grades by Group",
    x = "Group",
    y = "Final Grade"
  ) +
  theme_minimal()
"Combining summary statistics and a box plot is the best approach because it gives both a quick numerical overview and a visual comparison. The table shows each group’s average, median, and range of final grades, while the box plot highlights grade distribution, spread, and any outliers across groups. Together, they make it easy to spot differences in performance between groups at a glance."
```
## question 18 
```{r}
# Step 1: Calculate the average grade per course for each student
student_course_averages <- grades %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Step 2: Check if each student meets the "no course average below 5" requirement
course_pass <- student_course_averages %>%
  group_by(id) %>%
  summarise(course_pass = all(avg_grade >= 5), .groups = "drop")

# Step 3: Calculate the average grade per semester for each student
student_semester_averages <- grades %>%
  group_by(id, semester) %>%
  summarise(semester_avg = mean(grade, na.rm = TRUE), .groups = "drop")

# Step 4: Check if each student meets the "semester average >= 10" requirement
semester_pass <- student_semester_averages %>%
  group_by(id) %>%
  summarise(semester_pass = all(semester_avg >= 10), .groups = "drop")

# Step 5: Calculate the final grade (overall average) for each student
final_grades <- student_course_averages %>%
  group_by(id, group) %>%
  summarise(final_grade = mean(avg_grade, na.rm = TRUE), .groups = "drop")

# Step 6: Combine all criteria to determine if the student passes
pass_status <- final_grades %>%
  left_join(course_pass, by = "id") %>%
  left_join(semester_pass, by = "id") %>%
  mutate(pass = course_pass & semester_pass) %>%
  select(id, group, final_grade, pass)

# Display the resulting data frame
pass_status %>%
  slice_head(n = 5) %>%
  knitr::kable(
    caption = "Pass Status of Students Based on Year-End Criteria"
  )
```
## question 19 
```{r}
# Filter for students who do not pass but have a final grade >= 10
students_non_pass_high_grade <- pass_status %>%
  filter(pass == FALSE, final_grade >= 10)

# Count the number of these students
num_students_non_pass_high_grade <- nrow(students_non_pass_high_grade)

# Display the result with a sentence
paste("The number of students who did not pass but have a final grade of 10 or higher is:", num_students_non_pass_high_grade)
```
## question 20 
```{r}
# Step 1: Calculate the pass rate per group
pass_rate_per_group <- pass_status %>%
  group_by(group) %>%
  summarise(
    pass_rate = mean(pass) * 100 # Calculate pass rate as a percentage
  )

# Step 2: Plot the pass rate per group
ggplot(pass_rate_per_group, aes(x = factor(group), y = pass_rate)) +
  geom_col(fill = "lightblue") +
  labs(
    title = "Pass Rate per Group",
    x = "Group",
    y = "Pass Rate (%)"
  ) +
  theme_minimal()
```
